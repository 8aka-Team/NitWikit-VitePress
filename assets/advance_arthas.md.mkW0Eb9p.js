import{_ as e,c as s,a5 as t,o as i}from"./chunks/framework.O9ad3XaM.js";const k=JSON.parse('{"title":"Arthas","description":"","frontmatter":{"title":"Arthas","slug":"/arthas","sidebar_position":7},"headers":[],"relativePath":"advance/arthas.md","filePath":"nitwikit/docs/advance/arthas.md","lastUpdated":1737612226000}'),r={name:"advance/arthas.md"};function l(n,a,o,h,c,p){return i(),s("div",null,a[0]||(a[0]=[t('<h1 id="arthas" tabindex="-1">Arthas <a class="header-anchor" href="#arthas" aria-label="Permalink to &quot;Arthas&quot;">​</a></h1><p>Arthas(中文名:阿尔萨斯) 是一个 Java 诊断工具,在 Minecraft 中可以用来分析报错或追踪调用</p><div class="warning custom-block"><p class="custom-block-title">警告</p><p>此部分的内容非常难,需要有较高的知识水平!!!</p></div><p><a href="https://arthas.aliyun.com/" target="_blank" rel="noreferrer">官网</a></p><h2 id="下载" tabindex="-1">下载 <a class="header-anchor" href="#下载" aria-label="Permalink to &quot;下载&quot;">​</a></h2><p>自行参考<a href="https://arthas.aliyun.com/doc/install-detail.html" target="_blank" rel="noreferrer">官方文档 - 下载</a></p><h3 id="arthas-idea" tabindex="-1">Arthas IDEA <a class="header-anchor" href="#arthas-idea" aria-label="Permalink to &quot;Arthas IDEA&quot;">​</a></h3><p><a href="https://plugins.jetbrains.com/plugin/13581-arthas-idea" target="_blank" rel="noreferrer">下载</a></p><p>Arthas 的 idea 插件,可以帮助你生成 Arthas 命令</p><h2 id="启动" tabindex="-1">启动 <a class="header-anchor" href="#启动" aria-label="Permalink to &quot;启动&quot;">​</a></h2><p>自行参考<a href="https://arthas.aliyun.com/doc/quick-start.html" target="_blank" rel="noreferrer">官方文档 - 快速开始</a></p><h2 id="开始" tabindex="-1">开始! <a class="header-anchor" href="#开始" aria-label="Permalink to &quot;开始!&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">提示</p><p>这一部分的文档认为你初步掌握了 Arthas 的使用</p></div><h3 id="哪个插件发送了聊天信息" tabindex="-1">哪个插件发送了聊天信息？ <a class="header-anchor" href="#哪个插件发送了聊天信息" aria-label="Permalink to &quot;哪个插件发送了聊天信息？&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">watch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> net.minecraft.server.network.PlayerConnection</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{params[0],@java.lang.Thread@currentThread().getStackTrace()}&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;params.length==2 &amp;&amp; (params[0].class.name == &quot;net.minecraft.network.protocol.game.ClientboundPlayerChatPacket&quot; || params[0].class.name == &quot;net.minecraft.network.protocol.game.ClientboundSystemChatPacket&quot;)&#39;</span></span></code></pre></div><p>解释:</p><ul><li><code>-x 2</code> 表示遍历深度，可以调整来打印具体的参数和结果内容</li><li><code>net.minecraft.server.network.PlayerConnection</code> 是 1.17+ 玩家连接的主类</li><li>单引号括起来的是<a href="https://commons.apache.org/dormant/commons-ognl/language-guide.html" target="_blank" rel="noreferrer">OGNL 表达式</a>,是 Arthas 的核心</li><li><code>params[0]</code> 会让 Arthas 输出调用的第一个参数</li><li><code>@java.lang.Thread@currentThread().getStackTrace()</code> 输出调用堆栈</li><li>后面那一大坨是输出过滤,只关注参数长度为 2,并且发包为<code>net.minecraft.network.protocol.game.ClientboundSystemChatPacket</code>或 <code>net.minecraft.network.protocol.game.ClientboundPlayerChatPacket</code></li></ul><div class="warning custom-block"><p class="custom-block-title">警告</p><p>由于混淆映射表的问题,该命令不一定在你的服务端核心上适用</p></div><h3 id="查看类是哪个插件添加的" tabindex="-1">查看类是哪个插件添加的 <a class="header-anchor" href="#查看类是哪个插件添加的" aria-label="Permalink to &quot;查看类是哪个插件添加的&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> com.google.gson.Gson</span></span></code></pre></div><p>过于基础,不做解释</p><h3 id="日志是哪个插件打印的" tabindex="-1">日志是哪个插件打印的 <a class="header-anchor" href="#日志是哪个插件打印的" aria-label="Permalink to &quot;日志是哪个插件打印的&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">watch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.apache.logging.log4j.core.config.LoggerConfig</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> processLogEvent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{params[0].message.message,@java.lang.Thread@currentThread().getStackTrace()}&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;params[0].message.message.contains(&quot;日志中的一部分内容&quot;)&#39;</span></span></code></pre></div><ul><li><code>org.apache.logging.log4j.core.config.LoggerConfig</code> 是 Minecraft 的日志核心库</li><li><code>processLogEvent</code> 是日志记录事件方法</li><li><code>params[0].message.message,@java.lang.Thread@currentThread().getStackTrace()</code> 打印出输出的日志和调用堆栈</li><li><code>params[0].message.message.contains(&quot;日志中的一部分内容&quot;)</code> 检查输出消息中是否有想要的</li></ul>',24)]))}const g=e(r,[["render",l]]);export{k as __pageData,g as default};
