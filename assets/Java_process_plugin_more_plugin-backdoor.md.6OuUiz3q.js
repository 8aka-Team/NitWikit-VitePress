import{_ as s,c as e,a5 as n,o as t}from"./chunks/framework.O9ad3XaM.js";const u=JSON.parse('{"title":"插件排毒","description":"","frontmatter":{"title":"插件排毒","sidebar_position":5},"headers":[],"relativePath":"Java/process/plugin/more/plugin-backdoor.md","filePath":"nitwikit/docs-java/process/plugin/more/plugin-backdoor.md","lastUpdated":1738604712000}'),p={name:"Java/process/plugin/more/plugin-backdoor.md"};function r(l,a,o,i,c,d){return t(),e("div",null,a[0]||(a[0]=[n(`<h1 id="插件排毒" tabindex="-1">插件排毒 <a class="header-anchor" href="#插件排毒" aria-label="Permalink to &quot;插件排毒&quot;">​</a></h1><div class="danger custom-block"><p class="custom-block-title">危险</p><p>此工具不可能让你避开 100% 的风险</p><p>你应该从正规渠道获取插件，而不是寄希望于此软件</p></div><p>有些时候，当你从一些不可信的来源获得插件（比如闲鱼）的时候，这个时候就需要对插件进行扫描排除潜在威胁，或者你发现你的服务器莫名其妙的多出了几个OP，你也需要对现有插件进行扫描</p><p>McGuard 可以在不启动服务器的情况下对服务端中的全部插件进行扫描，并找出潜在的恶意插件。</p><h2 id="下载" tabindex="-1">下载 <a class="header-anchor" href="#下载" aria-label="Permalink to &quot;下载&quot;">​</a></h2><p>下载 MCG 的 <a href="https://cd.starkettle.com/MCG.jar" target="_blank" rel="noreferrer">jar</a> 存放到服务端根目录即可。</p><h2 id="控制台模式" tabindex="-1">控制台模式 <a class="header-anchor" href="#控制台模式" aria-label="Permalink to &quot;控制台模式&quot;">​</a></h2><h3 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h3><p>打开 cmd，在服务端根目录运行 <code>java -Xmx1G -jar MCG.jar</code></p><p>当MCG控制台模式完成启动后，你将见到以下字样：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[McGuard] 感谢您使用McGuard！</span></span>
<span class="line"><span>MCGuard v-b0/r0 Author: huzpsb</span></span>
<span class="line"><span>请选择模式(0-标准模式 1-专家模式 2-开发者模式)：</span></span></code></pre></div><p>目前，你只需要选择 <strong>0</strong> 即可，专家模式会在后面提到</p><h3 id="结果" tabindex="-1">结果 <a class="header-anchor" href="#结果" aria-label="Permalink to &quot;结果&quot;">​</a></h3><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[提示] 正在扫描 MCG.jar ................</span></span>
<span class="line"><span>[提示] 正在扫描 Vault.jar ................</span></span>
<span class="line"><span>[提示] 正在扫描 [C]安全测试_CoRE.jar ................</span></span>
<span class="line"><span></span></span>
<span class="line"><span>---------------------------------------------------------</span></span>
<span class="line"><span>[结果展示][C]安全测试_CoRE.jar</span></span>
<span class="line"><span>[严重] a/x.class 很有可能存在获取OP类后门 (r:set-only)。</span></span>
<span class="line"><span>[严重] a/x.class 很有可能存在远程命令类后门 (r:processbuilder)。</span></span>
<span class="line"><span>扫描完成！请按任意键退出</span></span></code></pre></div><p>对于未检出异常的插件，MCG 不会输出“结果展示”块。例如，上文中的 MCG.jar 和 Vault.jar。</p><p>对于存在异常的插件，MCG 会输出“结果展示”块。并给出异常的具体描述。</p><div class="warning custom-block"><p class="custom-block-title">警告</p><p>*注意，MCG 不会对插件进行修改，也不会对插件进行删除。你需要手动删除异常插件</p></div><h3 id="专家模式" tabindex="-1">专家模式 <a class="header-anchor" href="#专家模式" aria-label="Permalink to &quot;专家模式&quot;">​</a></h3><p>会使用内置的已知恶意代码对插件进行匹配并使用某些规则分析代码的意图，能够检出绝大多数常见的与没有故意规避扫描的恶意插件。存在一定的误报。</p><h2 id="插件模式" tabindex="-1">插件模式 <a class="header-anchor" href="#插件模式" aria-label="Permalink to &quot;插件模式&quot;">​</a></h2><p>MCG 的插件模式是一个 Bukkit/Spigot 服务端插件。它可以在服务器运行过程中对服务器进行持续的保护，减少漏网之鱼。</p><p><strong>请注意，插件模式的安全是相对的。可能存在极少数恶意插件能够突破 MCG 的行为管控。不要运行存在已知恶意插件的服务端，哪怕你已经安装了 MCG ！</strong></p><p><strong>在运行来源未知服务端前，我们强烈推荐先使用MCG的控制台模式进行扫描，并提供一个虚拟化（Sandboxie等）的环境！</strong></p><p>更详细的教程和 Pro 版本的购买请 <a href="https://starkettle.com/mcg/" target="_blank" rel="noreferrer">点击</a></p>`,24)]))}const b=s(p,[["render",r]]);export{u as __pageData,b as default};
