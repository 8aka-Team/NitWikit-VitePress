import{_ as h,c as r,j as i,a,G as e,w as n,a5 as k,B as p,o as d}from"./chunks/framework.O9ad3XaM.js";const x=JSON.parse('{"title":"如何保持服务器在 Linux 服务器中后台运行","description":"","frontmatter":{"title":"如何保持服务器在 Linux 服务器中后台运行","sidebar_position":3},"headers":[],"relativePath":"nitwikit/docs/advance/Linux/keep-running.md","filePath":"nitwikit/docs/advance/Linux/keep-running.md","lastUpdated":1727754229000}'),c={name:"nitwikit/docs/advance/Linux/keep-running.md"};function o(g,s,u,F,y,m){const t=p("TabItem"),l=p("Tabs");return d(),r("div",null,[s[3]||(s[3]=i("h1",{id:"如何保持服务器在-linux-服务器中后台运行",tabindex:"-1"},[a("如何保持服务器在 Linux 服务器中后台运行 "),i("a",{class:"header-anchor",href:"#如何保持服务器在-linux-服务器中后台运行","aria-label":'Permalink to "如何保持服务器在 Linux 服务器中后台运行"'},"​")],-1)),s[4]||(s[4]=i("p",null,"由于Linux的会话机制，在ssh断开连接之后手动启动的服务端会停止运行，而我们需要服务端保持后台运行。",-1)),s[5]||(s[5]=i("h2",{id:"方法一-screen-推荐",tabindex:"-1"},[a("方法一 screen(推荐) "),i("a",{class:"header-anchor",href:"#方法一-screen-推荐","aria-label":'Permalink to "方法一 screen(推荐)"'},"​")],-1)),s[6]||(s[6]=i("p",null,"使用screen创建一个虚拟的窗口运行服务端，首先安装screen，在终端输入：",-1)),s[7]||(s[7]=i("p",null,[a("确保你的系统上有"),i("code",null,"screen"),a("包，没有的话安装它们：")],-1)),e(l,null,{default:n(()=>[e(t,{value:"debian",label:"Debian/Ubuntu Linux",default:""},{default:n(()=>s[0]||(s[0]=[a(" ```bash apt-get install screen ``` ")])),_:1}),e(t,{value:"redhat",label:"CentOS/Redhat Linux"},{default:n(()=>s[1]||(s[1]=[a(" ```bash yum install screen ``` ")])),_:1}),e(t,{value:"arch",label:"Arch Linux"},{default:n(()=>s[2]||(s[2]=[a(" ```bash pacman -Sy screen ``` ")])),_:1})]),_:1}),s[8]||(s[8]=k(`<p>screen 的基础指令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">screen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ls</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # 列出所有的 screen</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">screen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 创建一个名叫 xxx 的虚拟窗口(推荐以每个子服务器命名)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">screen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 进入 xxx 虚拟窗口(只能进入已创建且无人使用的 screen)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">screen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 踢出正在使用 xxx 窗口的用户</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">screen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> quit</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 删除 xxx 窗口(在 screen 中输入 exit 也可以删除)</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>重新连接到screen时可以使用 <code>screen -Dr xxx</code>指令，意为踢出正在使用 xxx 窗口的用户并回到 xxx 窗口</p></div><p>在 screen 中启动服务端，在 screen 中时，按快捷键 <code>Ctrl + A + D</code> 即可返回原窗口。</p><p>推荐原因：后台运行的同时还可以在服务端控制台中查看日志，打指令</p><h2 id="方法二-面板-推荐" tabindex="-1">方法二 面板(推荐) <a class="header-anchor" href="#方法二-面板-推荐" aria-label="Permalink to &quot;方法二  面板(推荐)&quot;">​</a></h2><p>例如 mcsm，简单无脑可视化</p><h2 id="方法三-systemd" tabindex="-1">方法三 Systemd <a class="header-anchor" href="#方法三-systemd" aria-label="Permalink to &quot;方法三 Systemd&quot;">​</a></h2><p>使用 vim 命令创建 mc.service 单元文件</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.config/systemd/user/mc.service</span></span></code></pre></div><p>文件中的内容按以下配置</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[Unit]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=Minecraft Server</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">After</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=network.target</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[Service]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WorkingDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=这里填工作目录路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ExecStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=这里填启动命令</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ExecStop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=/bin/kill -SIGINT $MAINPID</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=on-failure</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[Install]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WantedBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=multi-user.target</span></span></code></pre></div><p>配置完成后输入以重新加载：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> daemon-reload</span></span></code></pre></div><p>然后启动服务器并设置开机启动，先后输入:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mc.service</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mc.service</span></span></code></pre></div><p><em>可以通过<code>systemctl --user status mc.service</code>查看服务运行状态。</em></p><p><a href="https://blog.csdn.net/WHQ78164/article/details/132956725" target="_blank" rel="noreferrer">详细设置说明</a></p><p><a href="https://wiki.archlinuxcn.org/wiki/Systemd#%E7%BC%96%E5%86%99%E5%8D%95%E5%85%83%E6%96%87%E4%BB%B6" target="_blank" rel="noreferrer">Arch wiki 上的教程</a></p><p>优点：可以实现自动重启，开机自启等操作</p><p>缺点：无法进入控制台打指令</p><h2 id="方法四-nohup和" tabindex="-1">方法四 nohup和&amp; <a class="header-anchor" href="#方法四-nohup和" aria-label="Permalink to &quot;方法四 nohup和&amp;&quot;">​</a></h2><p>&amp;：在启动时后面加一个&amp;</p><p>例如：./start.sh &amp;</p><p>nohup：在启动时前面加上这个</p><p>例如：nohup ./start.sh &gt; run.log 2&gt;&amp;1 &amp;</p><p>详细参数：</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Start.sh: 你需要后台运行的程序</p><blockquote><p>: 日志文件追加到文件中</p></blockquote><p>run.log: 运行的日志，或你的文件的输出内容</p><p>&amp; 是一个描述符，如果1或2前不加&amp;，会被当成一个普通文件。</p><p>1&gt;&amp;2 意思是把标准输出重定向到标准错误.</p><p>2&gt;&amp;1 意思是把标准错误输出重定向到标准输出。</p><p>&amp;&gt;filename 意思是把标准输出和标准错误输出都重定向到文件filename中</p></div>`,28))])}const C=h(c,[["render",o]]);export{x as __pageData,C as default};
