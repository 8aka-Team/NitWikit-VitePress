import{_ as a,c as t,a5 as e,G as l,B as n,o as h}from"./chunks/framework.O9ad3XaM.js";const p="/assets/nogui.5vBFLA1x.jpg",b=JSON.parse('{"title":"什么是启动脚本？","description":"","frontmatter":{"title":"什么是启动脚本？","sidebar_position":4},"headers":[],"relativePath":"start/basic/what-is-startup-script.md","filePath":"nitwikit/docs/start/basic/what-is-startup-script.md","lastUpdated":1749616642000}'),r={name:"start/basic/what-is-startup-script.md"};function d(o,s,k,c,F,g){const i=n("nw-image-viewer");return h(),t("div",null,[s[0]||(s[0]=e('<h1 id="什么是启动脚本" tabindex="-1">什么是启动脚本？ <a class="header-anchor" href="#什么是启动脚本" aria-label="Permalink to &quot;什么是启动脚本？&quot;">​</a></h1><p>启动脚本主要部分就是设置 Java 参数设置。</p><p><em>对于 Windows 服务器来说，启动脚本是 <code>.bat</code> 后缀的文件，对 Linux 服务器而言，启动脚本是 <code>.sh</code> 后缀的文件。</em></p><p><code>sh</code> 和 <code>bat</code> 是两种不同操作系统环境下用于执行脚本的文件扩展名，它们的主要区别在于运行环境、语法的不同：</p><h3 id="sh-shell-script-linux" tabindex="-1">SH (Shell Script)(Linux) <a class="header-anchor" href="#sh-shell-script-linux" aria-label="Permalink to &quot;SH (Shell Script)(Linux)&quot;">​</a></h3><ul><li>语法：SH 脚本使用 Shell 命令和控制结构，支持条件判断、循环、函数定义等高级编程特性。</li><li>执行方式：在终端通过 <code>./script.sh</code> 或 <code>sh script.sh</code> 来执行 (确保脚本具有执行权限)。</li></ul><h3 id="bat-batch-file-windows" tabindex="-1">BAT (Batch File)(Windows) <a class="header-anchor" href="#bat-batch-file-windows" aria-label="Permalink to &quot;BAT (Batch File)(Windows)&quot;">​</a></h3><ul><li>语法：BAT 脚本包含一系列 DOS 命令和批处理命令，支持简单的条件判断和循环，但相比 SH 脚本，其功能和灵活性较低。</li><li>执行方式：双击文件或者在命令提示符下输入 <code>script.bat</code> 来执行。</li></ul><p>注意:Windows 和 Linux 的启动脚本不能通用，不是改一下后缀名就可以</p><h2 id="什么是启动参数" tabindex="-1">什么是启动参数 <a class="header-anchor" href="#什么是启动参数" aria-label="Permalink to &quot;什么是启动参数&quot;">​</a></h2><p>启动参数 (也称 Flag) 主要分为 3 类：</p><ul><li>标准参数 (-)：所有的 JVM 实现都必须实现这些参数的功能，而且向后兼容；</li><li>非标准参数 (-X)：默认 JVM 实现这些参数的功能，但是并不保证所有 JVM 实现都满足，且不保证向后兼容；</li><li>非 Stable 参数 (-XX)：此类参数各个 JVM 实现会有所不同，将来可能会随时取消，需要慎重使用；</li></ul><h3 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xms12G</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xmx12G</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 核心名.jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nogui</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">警告</p><p>作为新手，不用在意大多数参数的作用，你需要做的就是开启服务器。</p><p><strong>不要忘记改最后的“核心名.jar!</strong></p></div><table tabindex="0"><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-Xmx[size]</td><td>设置最大内存大小，默认为物理内存的 1/4 或者 1G，需大于 2M，可以指定单位 K/M/G</td></tr><tr><td>-Xms[size]</td><td>设置最小内存大小，默认为物理内存的 1/64，需大于 1M</td></tr><tr><td>-jar</td><td>为 Java 指定需要运行的 Jar 程序</td></tr><tr><td>--nogui</td><td>关闭服务器 GUI，少量性能提升，大多数人不需要用到</td></tr></tbody></table><details><summary>--nogui 干了什么</summary><p>不显示类似下面的 GUI</p><p><img src="'+p+`" alt=""></p><p>真的，这个 GUI 一点用没有，别开它了</p></details><div class="info custom-block"><p class="custom-block-title">信息</p><ol><li>无论什么时候，分配内存时一定要多预留 15% 左右内存，如服务器还剩余 10G 内存，不要将 -Xms 设置到大于 9G 的内存，否则会很危险。</li><li>在 G1GC 模式下，尽量保证 Xmx = Xms 因为如果二者不同 JVM 需要更多的内存时候，JVM 需要申请更多内存，这个过程的耗时会导致顿卡。</li><li>更多的参数讲解，请前往 <a href="https://nitwikit.8aka.org/Java/optimize/jvm" target="_blank" rel="noreferrer">JVM 参数优化</a></li></ol></div><h3 id="如何设置自动重启" tabindex="-1">如何设置自动重启 <a class="header-anchor" href="#如何设置自动重启" aria-label="Permalink to &quot;如何设置自动重启&quot;">​</a></h3><p>对于 Windows <code>start.bat</code> 可参考的脚本如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@ECHO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OFF</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:start</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .....</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 核心名.jar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --nogui</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">goto</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div><p>对于 Linux <code>start.sh</code> 可参考的脚本如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    java</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .....</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 核心名.jar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --nogui</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 服务器自动重启中</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 同时按下</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CTRL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 关服.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div>`,23)),l(i)])}const C=a(r,[["render",d]]);export{b as __pageData,C as default};
