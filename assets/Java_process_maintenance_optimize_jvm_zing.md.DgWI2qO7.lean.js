import{_ as e,c as o,a5 as t,o as i}from"./chunks/framework.O9ad3XaM.js";const m=JSON.parse('{"title":"Azul Zing","description":"","frontmatter":{"sidebar_position":6,"title":"Azul Zing","slug":"/optimize/jvm/zing"},"headers":[],"relativePath":"Java/process/maintenance/optimize/jvm/zing.md","filePath":"nitwikit/docs-java/process/maintenance/optimize/jvm/zing.md","lastUpdated":1737286487000}'),n={name:"Java/process/maintenance/optimize/jvm/zing.md"};function l(r,a,c,d,s,p){return i(),o("div",null,a[0]||(a[0]=[t('<h1 id="azul-zing" tabindex="-1">Azul Zing <a class="header-anchor" href="#azul-zing" aria-label="Permalink to &quot;Azul Zing&quot;">​</a></h1><p>通用内容的参数可以使用(比如大页)，但不要自行指定GC，或其他优化参数</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Azul Zing 的专业性较强,新手请不要使用</p></div><h2 id="readynow" tabindex="-1">ReadyNow <a class="header-anchor" href="#readynow" aria-label="Permalink to &quot;ReadyNow&quot;">​</a></h2><p>你大概已经注意到了，Zing的预热期很长，ReadyNow就是来解决这个问题的</p><p>若要启用 ReadyNow，请添加以下命令行选项，其中两者<code>&lt;file&gt;</code>通常相同：</p><p><code>-XX:ProfileLogIn=&lt;file&gt;</code> 指示 Azul Platform Prime 使用现有配置文件日志中的信息。</p><p><code>-XX:ProfileLogOut=&lt;file&gt;</code> 记录之前的编译和运行中的去优化决策。</p><p>然后，运行应用程序将自动生成或更新配置文件日志。此配置文件日志将在应用程序的后续运行时使用，从而改进预热。</p><p>官方推荐所有重要函数执行<strong>5万遍</strong></p><p>添加<code>-XX:+FalconUseCompileStashing -XX:+FalconLoadObjectCache -XX:-FalconSaveObjectCache</code>以使用编译存储</p><h2 id="垃圾回收器" tabindex="-1">垃圾回收器 <a class="header-anchor" href="#垃圾回收器" aria-label="Permalink to &quot;垃圾回收器&quot;">​</a></h2><p>C4 是 Zing 中唯一的垃圾收集器，取代了 OpenJDK 中可用的其他垃圾收集器。</p><h2 id="紧凑字符串" tabindex="-1">紧凑字符串 <a class="header-anchor" href="#紧凑字符串" aria-label="Permalink to &quot;紧凑字符串&quot;">​</a></h2><p>添加选项<code>-XX:+CompactStrings</code>可减少内存占用，提高字符串密集型应用程序的性能，并减少花费在垃圾回收上的时间</p><h2 id="更高级别的-falcon-优化" tabindex="-1">更高级别的 Falcon 优化 <a class="header-anchor" href="#更高级别的-falcon-优化" aria-label="Permalink to &quot;更高级别的 Falcon 优化&quot;">​</a></h2><p>使用选项<code>-XX:FalconOptimizationLevel=3</code>可以获得更高级别的优化，但会出现更多兼容性问题</p><h2 id="多层级-falcon-优化" tabindex="-1">多层级 Falcon 优化 <a class="header-anchor" href="#多层级-falcon-优化" aria-label="Permalink to &quot;多层级 Falcon 优化&quot;">​</a></h2><p>使用选项<code>-XX:+UseMultiTiering</code> 通过添加多个编译层级，可以调整预热速度、编译器 CPU 使用时间和达到最佳性能所需时间之间的权衡。</p><h2 id="zing-system-tool" tabindex="-1">Zing System Tool <a class="header-anchor" href="#zing-system-tool" aria-label="Permalink to &quot;Zing System Tool&quot;">​</a></h2><p>这玩意可以让你的系统更加适应Zing，可以自动优化系统配置</p><p><a href="https://docs.azul.com/prime/zst/installation" target="_blank" rel="noreferrer">官方安装教程</a></p><p>使用<code>-XX:+UseZST</code> 开启</p><h2 id="防御性堆缩减" tabindex="-1">防御性堆缩减 <a class="header-anchor" href="#防御性堆缩减" aria-label="Permalink to &quot;防御性堆缩减&quot;">​</a></h2><p>动态减少提交的 Java 堆大小，以避免容器环境中出现的内存溢出（OOM）错误，这通常会导致 OOM 终止和崩溃。</p><p>使用<code>-XX:+UseDefensiveHeapShrinking</code> 开启</p><h2 id="缓解-intel-缩肛" tabindex="-1">缓解 Intel 缩肛 <a class="header-anchor" href="#缓解-intel-缩肛" aria-label="Permalink to &quot;缓解 Intel 缩肛&quot;">​</a></h2><p><code>-XX:+FalconCompensateForIntelMCUForErratumSKX102</code> 针对某些系统在英特尔针对 SKX102 错误更正发布的微代码更新后出现的性能下降</p><h2 id="存疑参数" tabindex="-1">存疑参数 <a class="header-anchor" href="#存疑参数" aria-label="Permalink to &quot;存疑参数&quot;">​</a></h2><p>这些参数未经测试,仅作为标记</p><ul><li><code>-XX:+UseSpecialHashSet</code> 启用对特殊 HashSet 填充模式的优化，当输入集合的元素频繁添加到空 HashSet 时。</li><li><code>-XX:-OptimizeIdentityHashForDistribution</code> 启用 System.identityHashCode()的替代实现，以牺份哈希计算速度为代价，提供更好的对象分布</li></ul>',31)]))}const u=e(n,[["render",l]]);export{m as __pageData,u as default};
