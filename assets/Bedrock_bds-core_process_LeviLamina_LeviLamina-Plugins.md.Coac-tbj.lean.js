import{_ as i,c as e,a5 as s,o as n}from"./chunks/framework.O9ad3XaM.js";const k=JSON.parse('{"title":"插件安装教程","description":"","frontmatter":{"title":"插件安装教程","sidebar_position":1},"headers":[],"relativePath":"Bedrock/bds-core/process/LeviLamina/LeviLamina-Plugins.md","filePath":"nitwikit/docs-bedrock/bds-core/process/LeviLamina/LeviLamina-Plugins.md","lastUpdated":1749617524000}'),t={name:"Bedrock/bds-core/process/LeviLamina/LeviLamina-Plugins.md"};function l(p,a,o,r,h,d){return n(),e("div",null,a[0]||(a[0]=[s(`<h1 id="插件安装教程" tabindex="-1">插件安装教程 <a class="header-anchor" href="#插件安装教程" aria-label="Permalink to &quot;插件安装教程&quot;">​</a></h1><h2 id="插件的结构" tabindex="-1">插件的结构 <a class="header-anchor" href="#插件的结构" aria-label="Permalink to &quot;插件的结构&quot;">​</a></h2><p>LeviLamina 的插件是以文件夹的格式存在的。通常插件文件夹中包含以下内容：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">插件文件夹</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─manifest.json</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // 插件元数据文件，该文件必须存在并格式正确才能被 LeviLamina 识别</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─(插件配置文件和数据库)...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 插件生成的配置文件和数据库等，大多数插件的配置文件名叫 config.json，并以一个文件夹或一个 .db 或 .json 后缀文件作为数据库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─(插件代码或二进制文件)...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 插件源代码，通常是 .js、.lua、.dll 后缀的文件。不要删除，修改或重命名文件，否则可能导致插件无法运行！</span></span></code></pre></div><p>通常情况下，你不需要手动修改 <code>manifest.json</code> 这个文件，因为插件作者会将它事先配置好。如果有特殊插件需要手动配置这个文件，该插件文档应该会给出相应教程。</p><h2 id="使用-lip-安装插件" tabindex="-1">使用 Lip 安装插件 <a class="header-anchor" href="#使用-lip-安装插件" aria-label="Permalink to &quot;使用 Lip 安装插件&quot;">​</a></h2><p>如果你还没有安装 Lip，可以参考 <a href="./LeviLamina-Install#准备工作-安装-lip">上一章的教程</a> 。</p><p>要使用 Lip 安装插件，你必须确保该插件<strong>支持通过 Lip 安装</strong> 。如果插件文档没有写明任何使用 Lip 安装的方法或命令，你就不应该使用 Lip 安装该插件。</p><p>通常情况下，一个 Lip 插件的安装命令会像这样：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">一个UR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h3 id="通过命令安装插件" tabindex="-1">通过命令安装插件 <a class="header-anchor" href="#通过命令安装插件" aria-label="Permalink to &quot;通过命令安装插件&quot;">​</a></h3><p>在服务端根目录 (包含 <code>bedrock_server_mod.exe</code> 的文件夹) 打开 powershell，执行插件使用说明给出的 Lip 安装命令，</p><h3 id="通过-lipui-安装插件" tabindex="-1">通过 LipUI 安装插件 <a class="header-anchor" href="#通过-lipui-安装插件" aria-label="Permalink to &quot;通过 LipUI 安装插件&quot;">​</a></h3><p>TODO</p><p>随后插件将在服务器下次启动时被加载。要想让正在运行的服务器加载该插件，你必须<strong>重启服务器</strong> 。</p><h2 id="手动安装插件" tabindex="-1">手动安装插件 <a class="header-anchor" href="#手动安装插件" aria-label="Permalink to &quot;手动安装插件&quot;">​</a></h2><h3 id="原生-native-插件" tabindex="-1">原生 (native) 插件 <a class="header-anchor" href="#原生-native-插件" aria-label="Permalink to &quot;原生 (native) 插件&quot;">​</a></h3><p>解压并整理插件文件夹，确保其结构符合上文结出的插件结构。<strong>有时插件压缩包解压后里面会套一层文件夹，这点要格外留意。</strong></p><p>将插件文件夹放入服务器的 <code>plugins</code> 文件夹，它将在服务器下次启动时被加载。要想让正在运行的服务器加载该插件，你必须<strong>重启服务器</strong> 。</p><h3 id="lse-插件" tabindex="-1">LSE 插件 <a class="header-anchor" href="#lse-插件" aria-label="Permalink to &quot;LSE 插件&quot;">​</a></h3><p>要安装 LSE 插件，你的服务器必须安装了 <a href="./legacy-script-engine">Legacy Script Engine</a> 作为前置。</p><h4 id="quick-js、lua、python-单文件" tabindex="-1">quick-js、lua、python 单文件 <a class="header-anchor" href="#quick-js、lua、python-单文件" aria-label="Permalink to &quot;quick-js、lua、python 单文件&quot;">​</a></h4><p>指只有一个 .js/.lua/.py 代码文件的插件。</p><p>首先将插件文件放入 <code>plugins</code> 文件夹，然后启动或重启一次服务器。 此时服务器将警告 <code>WARN [legacy-script-engine-quickjs] Legacy plugins have been migrated， please restart the server to load them!</code>。 <strong>此时插件并未被加载，你需要再次重启服务器</strong> ，之后插件就能加载了。</p><h4 id="nodejs、python-多文件" tabindex="-1">nodejs、python 多文件 <a class="header-anchor" href="#nodejs、python-多文件" aria-label="Permalink to &quot;nodejs、python 多文件&quot;">​</a></h4><p>指 .llplugin 后缀名或解压后为一个文件夹的 LSE 插件。</p><p>如果插件为文件夹，那么检查该文件夹结构。如果其中包含 <code>manifest.json</code>，直接将其放入 <code>plugins</code> 文件夹即可。随后它将在服务器下次启动时被加载。要想让正在运行的服务器加载该插件，你必须<strong>重启服务器</strong> 。</p><p>如果该插件为文件夹但不包含 <code>manifest.json</code>，你需要将其放入 <code>plugins</code> 文件夹后，按上文 quickjs、lua、python 单文件的操作方法进行操作。</p><p>如果该插件为 .llplugin 后缀名的单个文件，你需要将其后缀名改成 .zip 并解压，之后按照上面两种方法进行操作。</p>`,29)]))}const u=i(t,[["render",l]]);export{k as __pageData,u as default};
