import{_ as e,c as i,a5 as t,o as s}from"./chunks/framework.O9ad3XaM.js";const h=JSON.parse('{"title":"Dragonwell 8","description":"","frontmatter":{"sidebar_position":3,"title":"Dragonwell 8","slug":"/optimize/jvm/dragonwell8"},"headers":[],"relativePath":"Java/process/maintenance/optimize/jvm/dragonwell8.md","filePath":"nitwikit/docs-java/process/maintenance/optimize/jvm/dragonwell8.md","lastUpdated":1749617524000}'),o={name:"Java/process/maintenance/optimize/jvm/dragonwell8.md"};function l(n,a,p,r,c,d){return s(),i("div",null,a[0]||(a[0]=[t('<h1 id="dragonwell-8" tabindex="-1">Dragonwell 8 <a class="header-anchor" href="#dragonwell-8" aria-label="Permalink to &quot;Dragonwell 8&quot;">​</a></h1><p>这些参数只适合 Dragonwell 8</p><h2 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h2><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+AlwaysActAsServerClassMachine -XX:+ParallelRefProcEnabled -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:+PerfDisableSharedMem -XX:+AggressiveOpts -XX:+UseFastAccessorMethods -XX:MaxInlineLevel=15 -XX:MaxVectorSize=32 -XX:+UseCompressedOops -XX:ThreadPriorityPolicy=1 -XX:+UseDynamicNumberOfGCThreads -XX:NmethodSweepActivity=1 -XX:ReservedCodeCacheSize=350M -XX:-DontCompileHugeMethods -XX:MaxNodeLimit=240000 -XX:NodeLimitFudgeFactor=8000 -XX:+UseFPUForSpilling -XX:+UseBigDecimalOpt</span></span></code></pre></div><p>这些是基础参数</p><p>x86 Java 8 用户可以添加以下附加参数：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-XX:+UseXMMForArrayCopy</span></span></code></pre></div><h2 id="g1gc-参数" tabindex="-1">G1GC 参数 <a class="header-anchor" href="#g1gc-参数" aria-label="Permalink to &quot;G1GC 参数&quot;">​</a></h2><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-XX:+UseG1GC -XX:MaxGCPauseMillis=130 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:G1NewSizePercent=28 -XX:G1HeapRegionSize=16M -XX:G1ReservePercent=20 -XX:G1MixedGCCountTarget=3 -XX:InitiatingHeapOccupancyPercent=10 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=0 -XX:SurvivorRatio=32 -XX:MaxTenuringThreshold=1 -XX:G1SATBBufferEnqueueingThresholdPercent=30</span></span></code></pre></div><h2 id="jwarmup" tabindex="-1">JWarmup <a class="header-anchor" href="#jwarmup" aria-label="Permalink to &quot;JWarmup&quot;">​</a></h2><p>JWarmup 的基本原理：根据前一次程序运行的情况，记录下热点方法、类编译顺序等信息，在应用下一次启动的时候积极加载相关的类，并积极编译相关的方法，进而应用启动后可以直接运行编译好的 Java 代码 (C2 编译)。</p><h3 id="使用步骤" tabindex="-1">使用步骤 <a class="header-anchor" href="#使用步骤" aria-label="Permalink to &quot;使用步骤&quot;">​</a></h3><h4 id="记录阶段-一般是-beta-环境-在-5-分钟后生成-profiling-data" tabindex="-1">记录阶段 (一般是 beta 环境)，在 5 分钟后生成 profiling data <a class="header-anchor" href="#记录阶段-一般是-beta-环境-在-5-分钟后生成-profiling-data" aria-label="Permalink to &quot;记录阶段 (一般是 beta 环境)，在 5 分钟后生成 profiling data&quot;">​</a></h4><p>添加参数<code>-XX:-ClassUnloading -XX:-CMSClassUnloadingEnabled -XX:-ClassUnloadingWithConcurrentMark -XX:CompilationWarmUpLogfile=jwarmup.log -XX:+CompilationWarmUpRecording -XX:CompilationWarmUpRecordTime=300</code></p><h4 id="使用阶段-一般是生产环境" tabindex="-1">使用阶段 (一般是生产环境) <a class="header-anchor" href="#使用阶段-一般是生产环境" aria-label="Permalink to &quot;使用阶段 (一般是生产环境)&quot;">​</a></h4><p>添加参数<code>-XX:+CompilationWarmUp -XX:-TieredCompilation -XX:CompilationWarmUpLogfile=jwarmup.log -XX:CompilationWarmUpDeoptTime=0</code></p><h2 id="对象头压缩" tabindex="-1">对象头压缩 <a class="header-anchor" href="#对象头压缩" aria-label="Permalink to &quot;对象头压缩&quot;">​</a></h2><p>可以节约 10% 左右的 Java 对象内存占用，并可能提升程序性能。</p><p>添加参数<code>-XX:+UseCompactObjectHeaders</code></p><h2 id="wisp" tabindex="-1">Wisp <a class="header-anchor" href="#wisp" aria-label="Permalink to &quot;Wisp&quot;">​</a></h2><p>Wisp 在 JVM 上提供了一种用户态的线程实现。开启 Wisp2 后，Java 线程不再简单地映射到内核级线程，而是对应到一个协程，JVM 在少量内核线上调度大量协程执行，以减少内核的调度开销</p><p>只需添加 JVM 参数即可开启 Wisp2，无需更改程序！！</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>仅支持 Linux x64</p></div><p>添加参数<code>-XX:+UnlockExperimentalVMOptions -XX:+UseWisp2</code></p><h2 id="g1elasticheap" tabindex="-1">G1ElasticHeap <a class="header-anchor" href="#g1elasticheap" aria-label="Permalink to &quot;G1ElasticHeap&quot;">​</a></h2><p>G1ElasticHeap 是一种 GC 功能，用于将 Java 堆的内存返回给操作系统，以减少 Java 进程的内存占用。要启用此功能，你需要通过以下选项使用 G1 GC：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-XX:+G1ElasticHeap -XX:+ElasticHeapPeriodicUncommit</span></span></code></pre></div>',27)]))}const m=e(o,[["render",l]]);export{h as __pageData,m as default};
