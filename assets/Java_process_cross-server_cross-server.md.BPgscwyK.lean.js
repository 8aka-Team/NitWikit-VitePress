import{_ as r,c as o,a5 as t,G as s,B as i,o as l}from"./chunks/framework.O9ad3XaM.js";const p="/assets/%E7%81%B5%E9%AD%82%E7%94%BB%E5%B8%88%E6%95%99%E5%BC%80%E7%BE%A4%E7%BB%84%E6%9C%8D.C3VfemlZ.png",f=JSON.parse('{"title":"跨服端","description":"","frontmatter":{"title":"跨服端","slug":"/cross-server","sidebar_position":4},"headers":[],"relativePath":"Java/process/cross-server/cross-server.md","filePath":"nitwikit/docs-java/process/cross-server/cross-server.md","lastUpdated":1749617524000}'),c={name:"Java/process/cross-server/cross-server.md"};function n(d,e,h,u,m,k){const a=i("nw-image-viewer");return l(),o("div",null,[e[0]||(e[0]=t('<h1 id="跨服端" tabindex="-1">跨服端 <a class="header-anchor" href="#跨服端" aria-label="Permalink to &quot;跨服端&quot;">​</a></h1><p>简单的来说就是将多个服务器连成一个整体 (比如你经常看到的某些生存一区，生存二区)，玩家可以自由选择到哪个服务器，而不用退出重连，</p><p>不同服务器之间可以通过跨服同步 (比如 HuskSync ) 和数据库同步数据，平时常听到的群组服也是一个意思。跨服通常的实现方法是：</p><p>一个跨服端 (如 Velocity / BungeeCord ) 和多个子服 (如 Paper / Purpur / Leaf 等). 玩家只需要连接到跨服端即可让跨服端和子服联系，最后把玩家送到对应的服务器。</p><h2 id="原理讲解" tabindex="-1">原理讲解 <a class="header-anchor" href="#原理讲解" aria-label="Permalink to &quot;原理讲解&quot;">​</a></h2><p>假设你现在有三个服务器，分别为登录服，生存服和资源服，三个服务器都能正常进入和游玩，</p><p>现在你想建设一个群组服把这三个服务器连接起来，那么，你的服务器结构就会是这样</p><p><img src="'+p+'" alt=""></p><div class="info custom-block"><p class="custom-block-title">信息</p><p>BungeeCord / Velocity 端 (或他们的 Fork ) 在这里我们称为<code>跨服端</code>(或者称为 上游服务器 / 反向代理端)</p><p>这三个服务器都称为 <code>子服</code> 图中为三个子服，子服没有先后之分 (或者称为 下游服务器 / 后端服务器)</p></div><blockquote><p>如果你的群组服搭建完成，那么正常流程是：</p><blockquote><p>玩家通过客户端连接到跨服端，接着由跨服端送至各个子服，玩家可以通过一些方式切换自己所在的子服，感觉上就像是切换维度，玩家甚至意识不到自己换过服</p></blockquote></blockquote><h2 id="为什么需要跨服端" tabindex="-1">为什么需要跨服端？ <a class="header-anchor" href="#为什么需要跨服端" aria-label="Permalink to &quot;为什么需要跨服端？&quot;">​</a></h2><ol><li><p>Minecraft 是个单核心游戏，玩家数量在超过 50-100 后几乎任何核心都无法保证完全流畅 ( Folia 除外)，而使用多个服务器则可以充分利用多核心优势，大服务器必备;</p></li><li><p>对多个服务器，玩家需要退出重新进入，且数据不能共享。仅仅只是开两个服务器无法产生有效交互。所以需要跨服端对服务器进行切换和交互的完善;</p></li><li><p>对单个服务器，在内存有一点点富裕的情况下 (通常不到 1GB )，仍推荐使用跨服端，服务端对于反假人攻击的性能不如代理端，如果你被攻击了，更换成跨服端再说;</p></li><li><p>有些插件是跨服端才能安装的，而在 Bukkit 系下可能不稳定 (如<a href="https://github.com/CaaMoe/MultiLogin" target="_blank" rel="noreferrer">MultiLogin</a>).</p></li></ol><h2 id="推荐用什么" tabindex="-1">推荐用什么？ <a class="header-anchor" href="#推荐用什么" aria-label="Permalink to &quot;推荐用什么？&quot;">​</a></h2><p><strong>推荐使用 Velocity</strong>，除非你的版本不适合 Velocity 的现代转发</p><h3 id="安装数据库" tabindex="-1">安装数据库 <a class="header-anchor" href="#安装数据库" aria-label="Permalink to &quot;安装数据库&quot;">​</a></h3><p>你都跨服了，估计会有多端数据同步的需求吧？</p><p>看 <a href="https://nitwikit.8aka.org/database" target="_blank" rel="noreferrer">数据库相关</a></p><p>一般需要安装两个数据库，MySQL 和 Redis，MySQL 用于存储重要信息，比如账号密码，经济，权限 Redis 用于快速跨服同步</p>',18)),s(a)])}const v=r(c,[["render",n]]);export{f as __pageData,v as default};
