import{_ as e,c as a,a5 as l,o as d}from"./chunks/framework.O9ad3XaM.js";const f=JSON.parse('{"title":"什么是模组？","description":"","frontmatter":{"title":"什么是模组？","sidebar_position":5},"headers":[],"relativePath":"Java/start/basic/what-is-mod.md","filePath":"nitwikit/docs-java/start/basic/what-is-mod.md","lastUpdated":1730609404000}'),i={name:"Java/start/basic/what-is-mod.md"};function r(o,t,n,s,c,h){return d(),a("div",null,t[0]||(t[0]=[l('<h1 id="什么是模组" tabindex="-1">什么是模组？ <a class="header-anchor" href="#什么是模组" aria-label="Permalink to &quot;什么是模组？&quot;">​</a></h1><p>模组( Mod )是遵循 Forge、Fabric 或 LiteLoader 等 API 规范编写的 Java 程序。</p><h2 id="工作形式" tabindex="-1">工作形式 <a class="header-anchor" href="#工作形式" aria-label="Permalink to &quot;工作形式&quot;">​</a></h2><p>Minecraft 模组( Mod )一般来说模组会利用 Forge 或 Fabric 作为前置开发，通过反编译 Minecraft Java 源代码了解 Minecraft 干了什么，</p><p>进而删减或修改内容以实现新的功能。删减或修改内容既可以是服务端，也可以是客户端。因而相较插件只能修改部分服务端的内容要有更大的功能性。</p><h2 id="安装位置" tabindex="-1">安装位置 <a class="header-anchor" href="#安装位置" aria-label="Permalink to &quot;安装位置&quot;">​</a></h2><p>插件是需要安装在服务器根目录的 <code>/mods</code> 文件夹，然后需要 <strong>重启</strong> 服务器。</p><h2 id="模组的优点" tabindex="-1">模组的优点 <a class="header-anchor" href="#模组的优点" aria-label="Permalink to &quot;模组的优点&quot;">​</a></h2><ul><li>可以更为随心所欲的修改包括客户端和服务端的游戏代码，功能性更多；</li><li>大多数大型 Mod 是有相对详细的 Wiki 供玩家参考，更方便入手；</li><li>可以控制客户端使用的 Mod 降低客户端使用作弊端的可能性；</li></ul><h2 id="模组的缺点" tabindex="-1">模组的缺点 <a class="header-anchor" href="#模组的缺点" aria-label="Permalink to &quot;模组的缺点&quot;">​</a></h2><ul><li>模组基本没有稳定的 API，不像插件依赖稳定的 API 的插件，如果你玩的模组相对小众，那么很可能只有特定几个版本能够找到；</li><li>服务端如果不加插件生态，管理方面的模组会少一些，如果加上 Bukkit 生态兼容又容易出现兼容性、报错等问题，服务端往往稳定性欠佳，基本只能开半年；</li><li>模组更容易出现不兼容的情况，有时由于版本等不兼容很容易导致客户端无法启动的问题；</li><li>客户端必须安装特定的模组才能进入服务器，这存在的便捷性和安全性问题对某些玩家来说是比较难以接受的；</li><li>关于玩法的模组性能往往比较拉胯(特别是 Forge 平台)，对于 CPU 和内存的要求会更高。</li></ul><h2 id="模组可以做的事情" tabindex="-1">模组可以做的事情 <a class="header-anchor" href="#模组可以做的事情" aria-label="Permalink to &quot;模组可以做的事情&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:center;">性质</th><th style="text-align:left;">描述</th><th style="text-align:left;">样例</th></tr></thead><tbody><tr><td style="text-align:center;">探索</td><td style="text-align:left;">增加新的生态环境，生物，矿石，方块，建筑乃至新世界</td><td style="text-align:left;"><code>星系</code></td></tr><tr><td style="text-align:center;">科技</td><td style="text-align:left;">增加近现代科技元素，如机器、交通、能源、农学、基因学等</td><td style="text-align:left;"><code>工业2</code></td></tr><tr><td style="text-align:center;">魔法</td><td style="text-align:left;">增加魔法游戏元素</td><td style="text-align:left;"><code>神秘时代4</code></td></tr><tr><td style="text-align:center;">仓储</td><td style="text-align:left;">增加新的储存容器，提高物品储存能力</td><td style="text-align:left;"><code>储存抽屉</code></td></tr><tr><td style="text-align:center;">工匠</td><td style="text-align:left;">增加新的工具、盔甲、武器</td><td style="text-align:left;"><code>更多武器</code></td></tr><tr><td style="text-align:center;">食物</td><td style="text-align:left;">增加食材与菜谱</td><td style="text-align:left;"><code>丰收工艺</code></td></tr><tr><td style="text-align:center;">RPG</td><td style="text-align:left;">增加角色扮演或冒险类游戏元素</td><td style="text-align:left;"><code>暮色森林</code></td></tr><tr><td style="text-align:center;">信息</td><td style="text-align:left;">增加玩家可以获取的信息，例如查询合成表，小地图，血条等</td><td style="text-align:left;"><code>Hwyla</code></td></tr><tr><td style="text-align:center;">优化</td><td style="text-align:left;">优化内存和帧数，信息获取等</td><td style="text-align:left;"><code>FoamFix</code></td></tr></tbody></table>',13)]))}const g=e(i,[["render",r]]);export{f as __pageData,g as default};
