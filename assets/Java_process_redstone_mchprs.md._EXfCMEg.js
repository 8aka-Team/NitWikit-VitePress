import{_ as e,c as d,a5 as a,o as s}from"./chunks/framework.O9ad3XaM.js";const k=JSON.parse('{"title":"MCHPRS","description":"","frontmatter":{"sidebar_position":2,"title":"MCHPRS"},"headers":[],"relativePath":"Java/process/redstone/mchprs.md","filePath":"nitwikit/docs-java/process/redstone/mchprs.md","lastUpdated":1746369255000}'),i={name:"Java/process/redstone/mchprs.md"};function o(r,t,c,l,h,n){return s(),d("div",null,t[0]||(t[0]=[a(`<h1 id="mchprs" tabindex="-1">MCHPRS <a class="header-anchor" href="#mchprs" aria-label="Permalink to &quot;MCHPRS&quot;">​</a></h1><p>一个为红石而构建的 Minecraft 服务器。每个 512x512 的区域运行在单独的线程上,基于 Rust ,拥有非常高的性能</p><p>MCHPRS 与传统服务器非常不同。因为这个服务器是为计算红石的使用而量身定制的,所以许多原版的东西在这里不存在</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>MCHPRS 破坏了很多基于生物/传送装置的红石机器,因此 MCHPRS 最好的用途是纯粹的超大规模红石电路,比如红石计算机</p></div><h2 id="构建" tabindex="-1">构建 <a class="header-anchor" href="#构建" aria-label="Permalink to &quot;构建&quot;">​</a></h2><p>MCHPRS 的构建需要 Rust 和 Cargo,具体安装教程请自行上网搜索</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/MCHPR/MCHPRS.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MCHPRS</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --release</span></span></code></pre></div><p>完成后，编译的可执行文件为 <code>./target/release/mchprs</code> 或 <code>./target/release/mchprs.exe</code> ，具体取决于操作系统。</p><p>如果你希望基于你的 CPU 进一步优化(但兼容性会下降),你可以使用这个指令构建:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RUSTFLAGS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-C target-cpu=native&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --release</span></span></code></pre></div><p>如果你不想构建,你也可以直接在 <a href="https://github.com/MCHPR/MCHPRS/actions/workflows/build.yml" target="_blank" rel="noreferrer">GitHub Action</a> 下载构建好的</p><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><p>配置文件在 <code>Config.toml</code>:</p><table tabindex="0"><thead><tr><th>字段</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>bind_address</code></td><td>绑定地址与端口</td><td><code>0.0.0.0:25565</code></td></tr><tr><td><code>motd</code></td><td>MOTD</td><td><code>&quot;Minecraft 高性能红石服务器&quot;</code></td></tr><tr><td><code>chat_format</code></td><td>聊天消息格式化方式（使用花括号插入<code>username</code>和<code>message</code>变量）</td><td><code>&lt;{username}&gt; {message}</code></td></tr><tr><td><code>max_players</code></td><td>最大同时在线玩家数</td><td><code>99999</code></td></tr><tr><td><code>view_distance</code></td><td>视距</td><td><code>8</code></td></tr><tr><td><code>whitelist</code></td><td>是否启用白名单（读取<code>whitelist.json</code>文件）</td><td><code>false</code></td></tr><tr><td><code>schemati</code></td><td>模拟Open Redstone Engineers的<a href="https://github.com/OpenRedstoneEngineers/Schemati" target="_blank" rel="noreferrer">Schemati插件</a>的验证与目录结构</td><td><code>false</code></td></tr><tr><td><code>block_in_hitbox</code></td><td>允许在玩家碰撞箱内放置方块（简化碰撞检测逻辑）</td><td><code>true</code></td></tr><tr><td><code>auto_redpiler</code></td><td>自动使用红石编译器</td><td><code>false</code></td></tr></tbody></table><h2 id="velocity" tabindex="-1">Velocity <a class="header-anchor" href="#velocity" aria-label="Permalink to &quot;Velocity&quot;">​</a></h2><p>MCHPRS 本身不支持玩家身份验证，但支持 Velocity 转发</p><p>要使用 Velocity IP 转发，您必须设置并配置 Velocity 代理。确保您的 Velocity 配置中 <code>player-info-forwarding-mode</code> 设置为 <code>modern</code>.然后，将其追加到 <code>Config.toml</code>:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">velocity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">enabled = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这是来自你velocity配置中\`forwarding-secret-file\`文件里的密钥内容，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 而不是该文件的路径。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">secret = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;密钥&gt;&quot;</span></span></code></pre></div><h2 id="普通命令" tabindex="-1">普通命令 <a class="header-anchor" href="#普通命令" aria-label="Permalink to &quot;普通命令&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>缩写</th><th>说明</th></tr></thead><tbody><tr><td><code>/rtps [rtps|无限]</code></td><td>无</td><td>将区域的红石刻每秒设置为<code>[rtps]</code>（1个红石刻=2个游戏刻）</td></tr><tr><td><code>/radvance [刻数]</code></td><td><code>/radv</code></td><td>使区域推进<code>[刻数]</code>个红石刻</td></tr><tr><td><code>/teleport [玩家名]</code></td><td><code>/tp</code></td><td>传送至目标玩家所在位置</td></tr><tr><td><code>/teleport [x] [y] [z]</code></td><td><code>/tp</code></td><td>传送至指定坐标（支持相对坐标，浮点数格式参见<a href="https://doc.rust-lang.org/std/primitive.f64.html#grammar" target="_blank" rel="noreferrer">此文档</a>）</td></tr><tr><td><code>/speed [速度值]</code></td><td>无</td><td>设置飞行速度</td></tr><tr><td><code>/gamemode [模式]</code></td><td><code>/gmc</code>, <code>/gmsp</code></td><td>切换游戏模式</td></tr><tr><td><code>/container [类型] [信号强度]</code></td><td>无</td><td>获取特定容器（如木桶），该容器被比较器检测时会输出指定信号强度</td></tr><tr><td><code>/toggleautorp</code></td><td>无</td><td>切换红石编译器的自动编译功能</td></tr><tr><td><code>/stop</code></td><td>无</td><td>关闭服务器</td></tr></tbody></table><h2 id="redpiler" tabindex="-1">Redpiler <a class="header-anchor" href="#redpiler" aria-label="Permalink to &quot;Redpiler&quot;">​</a></h2><p>Redpiler 是 MCHPRS 的核心，这允许红石模拟比其他方式快得多。当 redpiler 运行时，所有红石连接都会预先计算，因此在此状态下与世界的交互受到限制。当 redpiler 运行时放置或破坏方块将导致重置并禁用 redpiler.</p><table tabindex="0"><thead><tr><th>命令</th><th>别名</th><th>说明</th></tr></thead><tbody><tr><td><code>/redpiler compile</code></td><td><code>/rp c</code></td><td>手动启动红石编译器。可使用下列多个参数（详见下文）。</td></tr><tr><td><code>/redpiler reset</code></td><td><code>/rp r</code></td><td>停止红石编译器。</td></tr></tbody></table><table tabindex="0"><thead><tr><th>参数</th><th>简写</th><th>说明</th></tr></thead><tbody><tr><td><code>--optimize</code></td><td><code>-o</code></td><td>启用红石编译优化。警告：此操作可能导致当前建造状态损坏。使用时请备份存档。</td></tr><tr><td><code>--io-only</code></td><td><code>-i</code></td><td>仅更新输入/输出相关方块状态（包括活板门、红石灯、音符盒、按钮、拉杆和压力板）。此参数可显著降低延迟并提升模拟速度。</td></tr><tr><td><code>--wire-dot-out</code></td><td><code>-d</code></td><td>将点状红石线视为<code>-i</code>参数中的输出方块（适用于彩色显示器等场景）。</td></tr><tr><td><code>--update</code></td><td><code>-u</code></td><td>红石编译器重置后更新全部方块状态。</td></tr><tr><td><code>--export</code></td><td><code>-e</code></td><td>以二进制格式导出编译图谱。适用于红石编译图谱的第三方开发场景。</td></tr><tr><td><code>--export-dot</code></td><td>无</td><td>生成后端图谱的graphviz点文件。用于调试/开发用途。</td></tr></tbody></table><h2 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h2><ul><li>启动速度极快,在配置文件已生成后启动仅需 2 ms</li><li>内存占用特别低,启动后内存占用仅有 1 MB</li><li>针对红石进行专门优化,达到了无与伦比的最强性能</li></ul><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><p>自行查看 <a href="https://github.com/MCHPR/MCHPRS/" target="_blank" rel="noreferrer">README</a></p>`,28)]))}const g=e(i,[["render",o]]);export{k as __pageData,g as default};
