import{_ as t,c as e,a5 as r,o as i}from"./chunks/framework.O9ad3XaM.js";const m=JSON.parse('{"title":"储存空间优化","description":"","frontmatter":{"title":"储存空间优化","sidebar_position":4},"headers":[],"relativePath":"Java/process/maintenance/optimize/storage-space-optimization.md","filePath":"nitwikit/docs-java/process/maintenance/optimize/storage-space-optimization.md","lastUpdated":1734712063000}'),o={name:"Java/process/maintenance/optimize/storage-space-optimization.md"};function d(p,a,n,l,s,h){return i(),e("div",null,a[0]||(a[0]=[r('<h1 id="储存空间优化" tabindex="-1">储存空间优化 <a class="header-anchor" href="#储存空间优化" aria-label="Permalink to &quot;储存空间优化&quot;">​</a></h1><h2 id="插件数据优化" tabindex="-1">插件数据优化 <a class="header-anchor" href="#插件数据优化" aria-label="Permalink to &quot;插件数据优化&quot;">​</a></h2><p>对于 <code>/plugins</code> 文件夹储存是否需要进行优化这个问题，有个很简单的判断方法就是查看总占用，</p><p>如果超过了 200 MB ，那么很有可能有些插件使用了 Sqlite / yml / zip 等方式储存了一些东西，</p><p>在服务器有一定人数的情况下这并不是推荐的储存方式，在某些情况下可能对储存空间会有一定的占用。</p><h3 id="使用数据库" tabindex="-1">使用数据库 <a class="header-anchor" href="#使用数据库" aria-label="Permalink to &quot;使用数据库&quot;">​</a></h3><p>合理使用数据库可以降低服务器硬盘占用。详见<a href="https://nitwikit.yizhan.wiki/database" target="_blank" rel="noreferrer">数据库相关</a></p><h2 id="备份空间优化" tabindex="-1">备份空间优化 <a class="header-anchor" href="#备份空间优化" aria-label="Permalink to &quot;备份空间优化&quot;">​</a></h2><h3 id="使用备份插件替代整端备份" tabindex="-1">使用备份插件替代整端备份 <a class="header-anchor" href="#使用备份插件替代整端备份" aria-label="Permalink to &quot;使用备份插件替代整端备份&quot;">​</a></h3><p>推荐两个备份插件(高效的备份，无需停服即可备份)：</p><p><a href="https://www.spigotmc.org/resources/ebackup-simple-and-reliable-backups-for-your-server-supports-ftp-sftp.69917/" target="_blank" rel="noreferrer">ebackup</a> 可设置黑名单不备份某些文件，FTP 远程备份支持</p><p><a href="https://www.spigotmc.org/resources/server-backup-ingame-dropbox-ftp-backup-1-8-1-20-multithreaded.79320/" target="_blank" rel="noreferrer">serverbackup</a> 可支持增量备份(即只备份最近变更过的文件)，占用空间更小</p><h2 id="存档存储空间优化" tabindex="-1">存档存储空间优化 <a class="header-anchor" href="#存档存储空间优化" aria-label="Permalink to &quot;存档存储空间优化&quot;">​</a></h2><p>Minecraft 默认的区块格式是 ANVIL ，但是这个区块格式有很多弊端，比如存了一些无用信息，使用了强制对齐等，</p><p>且至今还使用着古老的 zlib 压缩格式，所以如果硬盘吃紧时候，可以尝试对其进行调整。</p><p>注意，这是很底层的东西，其实不推荐在非必要情况下进行处理</p><h3 id="删除过时区块" tabindex="-1">删除过时区块 <a class="header-anchor" href="#删除过时区块" aria-label="Permalink to &quot;删除过时区块&quot;">​</a></h3><p>有一个插件可以做到，但是忘了名字</p><p>TODO</p><h3 id="更高效的储存方式" tabindex="-1">更高效的储存方式 <a class="header-anchor" href="#更高效的储存方式" aria-label="Permalink to &quot;更高效的储存方式&quot;">​</a></h3><h4 id="linear" tabindex="-1">Linear <a class="header-anchor" href="#linear" aria-label="Permalink to &quot;Linear&quot;">​</a></h4><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>Linear不适合玩家基数非常大/服务器经常滞后/压缩比较大(推荐默认1-5)/ CPU 核心数目小/服务器硬盘空间足够大的服务器。</p><p>换句话来说，只有玩家并不多但需要较大的地图且 VPS 默认给的硬盘较小时才应该考虑此格式。</p><p>如果强行在以上不适合使用 Linear 的服务器使用时可能会出现 <strong>局部大规模回档</strong> 的情况，请注意。</p><p>这应该是最后才应该考虑的方案。</p></div><p>此格式是由著名的 Xymb 大佬开发，相比于 ANVIL ，可以节省巨大的空间</p><p>主世界可以节省大约 50% 的空间，末地大约为 90% ，且使用现代的 zstd &amp; lz4 压缩，可以获得更快的加载和保存速度。</p><h5 id="转换区域格式" tabindex="-1">转换区域格式 <a class="header-anchor" href="#转换区域格式" aria-label="Permalink to &quot;转换区域格式&quot;">​</a></h5><p>使用之前你需要将 ANVIL 转换成 Linear 区域格式，如果你使用的是 Leaves ，你可以在服务端内部自动转换。</p><p><a href="https://github.com/xymb-endcrystalme/LinearRegionFileFormatTools" target="_blank" rel="noreferrer">转换工具</a> ，转换非常简单你只需要看着教程做就行(记得做备份)</p><h5 id="开启区域格式" tabindex="-1">开启区域格式 <a class="header-anchor" href="#开启区域格式" aria-label="Permalink to &quot;开启区域格式&quot;">​</a></h5><p>目前，支持线性区域格式的仅有 LinearPurpur ， LinearPaper ， Leaves ， Leaf ， Kaiiju (还有一堆Fork)，</p><p>开启教程不多说，你只需要查看 Wiki 就行。</p><h5 id="不兼容的插件" tabindex="-1">不兼容的插件 <a class="header-anchor" href="#不兼容的插件" aria-label="Permalink to &quot;不兼容的插件&quot;">​</a></h5><p>ServerBackup 一款备份插件，会由于找不到mca文件报错。 目前已知不兼容线性区域的格式的插件极少无比，已知的有大部分在线网页地图浏览程序，以及Residence部分不兼容(感谢z大神的优雅代码，当传送到一个未加载区块的领地时会崩溃)</p><h5 id="测试结果" tabindex="-1">测试结果 <a class="header-anchor" href="#测试结果" aria-label="Permalink to &quot;测试结果&quot;">​</a></h5><p>感谢 HaHaWTH 提供的测试结果，测试内容为使用 Chunky 加载半径 1000 格的方块并保存，测试核心为 Leaf ，实际结果可能与测试结果有出入。</p><table tabindex="0"><thead><tr><th>世界</th><th>ANVIL(原版格式)</th><th>Linear(压缩比为一)</th><th>Linear(压缩比为六，默认压缩比)</th><th>Linear(压缩比为22)(最大压缩比)</th></tr></thead><tbody><tr><td>主世界</td><td>192MB</td><td>142MB</td><td>117MB</td><td>92MB</td></tr><tr><td>地狱</td><td>118MB</td><td>70MB</td><td>60MB</td><td>46MB</td></tr><tr><td>末地</td><td>87MB</td><td>1.72MB</td><td>1.2MB</td><td>914KB</td></tr><tr><td>保存用时</td><td>3m18s</td><td>3m50s</td><td>4m44s</td><td>23m21s</td></tr><tr><td>内存占用</td><td>3GB左右</td><td>3.1GB</td><td>3.3GB</td><td>3.4 ~ 18GB(极不稳定)</td></tr></tbody></table><p>:::note</p><p>不推荐压缩比开到最大，推荐值为 6</p><p>:::</p><h4 id="slime" tabindex="-1">Slime <a class="header-anchor" href="#slime" aria-label="Permalink to &quot;Slime&quot;">​</a></h4><p>请查看<a href="https://nitwikit.yizhan.wiki/Java/advance/slime-world" target="_blank" rel="noreferrer">Slime 区域格式</a></p><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><p>1。使用软链接 / 快捷方式共享多个服务器的 lib ，Minecraft 本体等(除非空间非常少否则不要这样，后果自负)；</p><p>2。使用清理软件；</p><p>3。重装系统，并最小化安装(不安装非必要软件)；</p><p>4。检查是否有多余的 Java(一般来说开服一个版本的 Java 即可)。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>除非你知道你在删什么否则请先请教大佬能不能删除或者先备份，不要删了才发现服务器出问题。</p></div>',46)]))}const b=t(o,[["render",d]]);export{m as __pageData,b as default};
