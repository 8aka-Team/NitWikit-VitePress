import{_ as a,c as r,a5 as n,G as s,B as d,o as l}from"./chunks/framework.O9ad3XaM.js";const m=JSON.parse('{"title":"什么是乱码？","description":"","frontmatter":{"title":"什么是乱码？","sidebar_position":7},"headers":[],"relativePath":"start/basic/what-is-messy-code.md","filePath":"nitwikit/docs/start/basic/what-is-messy-code.md","lastUpdated":1727783793000}'),i={name:"start/basic/what-is-messy-code.md"};function c(o,t,p,g,h,x){const e=d("nw-image-viewer");return l(),r("div",null,[t[0]||(t[0]=n('<h2 id="什么是乱码" tabindex="-1">什么是乱码？ <a class="header-anchor" href="#什么是乱码" aria-label="Permalink to &quot;什么是乱码？&quot;">​</a></h2><p>有时候，你会发现你的文本文件中的中文都莫名其妙变成了一些奇奇怪怪的符号，看起来乱糟糟的，毫无逻辑可言。 这就是<strong>乱码</strong>。</p><h2 id="为什么会出现乱码" tabindex="-1">为什么会出现乱码？ <a class="header-anchor" href="#为什么会出现乱码" aria-label="Permalink to &quot;为什么会出现乱码？&quot;">​</a></h2><p>乱码出现的原因，就是不使用原来编写文本的时候的编码来打开这个文本。</p><p>而不同编码确定一个字符的规则不同。</p><h2 id="什么是编码" tabindex="-1">什么是编码？ <a class="header-anchor" href="#什么是编码" aria-label="Permalink to &quot;什么是编码？&quot;">​</a></h2><p>编码，也叫<strong>字符编码</strong>。通俗的讲，就是计算机的“字典”。你的文本文件在计算机中并不是以明文存在的，而是以一串二进制数表示的。比如：</p><p>如果你让计算机使用A编码，然后你输入了一个“人”字。那么在你输入后，计算机就会将“人”字转换为A编码中“人”字对应的二进制数。比如这个二进制数是0010011。</p><p>倘若我再次打开的时候使用了B编码，而计算机中存储的二进制数仍然是0010011。那么计算机就会在B编码的字符库中查找这个二进制数对应的字，比如在B编码中，0010011指的是“你”这个字，那么你再次打开这个文本的时候你就会发现“人”字变成了“你”字。</p><p>当然，实际的编码规则远没有这么简单，大家只需要理解为什么会乱码就可以了。</p><h2 id="乱码的类型" tabindex="-1">乱码的类型 <a class="header-anchor" href="#乱码的类型" aria-label="Permalink to &quot;乱码的类型&quot;">​</a></h2><p>这里列出了一个表格方便大家知道自己的文本是怎么乱码的。</p><table tabindex="0"><thead><tr><th style="text-align:center;">名称</th><th style="text-align:center;">示例</th><th style="text-align:center;">特点</th><th style="text-align:center;">产生原因</th></tr></thead><tbody><tr><td style="text-align:center;">古文码</td><td style="text-align:center;">宀佺殑娉曞浗浜嗗緢涔�</td><td style="text-align:center;">大都为不认识的古文，并夹杂日韩文</td><td style="text-align:center;">以GBK方式读取UTF-8编码的中文</td></tr><tr><td style="text-align:center;">口字码</td><td style="text-align:center;">��ķ����˺ܾ�</td><td style="text-align:center;">大部分字符为小方块</td><td style="text-align:center;">以UTF-8方式读取GBK编码的中文</td></tr><tr><td style="text-align:center;">符号码</td><td style="text-align:center;">å²çæ³å½äºå¾ä¹</td><td style="text-align:center;">大部分字符为各种符号</td><td style="text-align:center;">以ISO8859-1方式读取UTF-8编码的中文</td></tr><tr><td style="text-align:center;">拼音码</td><td style="text-align:center;">ËêµÄ·¨¹úÁËºÜ¾Ã</td><td style="text-align:center;">大部分字符以头顶带有各种类型声调符号的字母</td><td style="text-align:center;">以ISO8859-1方式读取GBK编码的中文</td></tr><tr><td style="text-align:center;">问句码</td><td style="text-align:center;">好好学习天天??</td><td style="text-align:center;">字符串长度为偶数时正确，长度为奇数时最后的字符变为问号</td><td style="text-align:center;">以GBK方式读取UTF-8编码的中文，然后又用UTF-8的格式再次读取</td></tr><tr><td style="text-align:center;">锟拷码</td><td style="text-align:center;">锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷</td><td style="text-align:center;">全中文字符，且大部分字符为&quot;锟斤拷&quot;这几个字符</td><td style="text-align:center;">以UTF-8方式读取GBK编码的中文，然后又用GBK的格式再次读取</td></tr></tbody></table><p>解决乱码的方式也很简单，只需要根据乱码的特征，进行转码或重新用原来的编码打开就可以了。</p><h2 id="如何设置编码、转码" tabindex="-1">如何设置编码、转码 <a class="header-anchor" href="#如何设置编码、转码" aria-label="Permalink to &quot;如何设置编码、转码&quot;">​</a></h2><p>这里以 VScode 为例:</p><p><img src="https://img.fastmirror.net/s/2024/07/19/6699cc78da4ab.png" alt=""></p><p>发现这是典型的口字码</p><p>我们看到 VScode 右下角</p><p><img src="https://img.fastmirror.net/s/2024/07/19/6699cd59a7b0a.png" alt=""></p><p>点击<strong>UTF-8</strong></p><p>然后重新用<strong>GBK</strong>方式打开就可以了</p><p><img src="https://img.fastmirror.net/s/2024/07/19/6699cd9d5521f.png" alt=""></p>',23)),s(e)])}const b=a(i,[["render",c]]);export{m as __pageData,b as default};
